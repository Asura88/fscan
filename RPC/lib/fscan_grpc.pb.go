// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/fscan.proto

package lib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FscanService_StartScan_FullMethodName         = "/lib.FscanService/StartScan"
	FscanService_GetScanResults_FullMethodName    = "/lib.FscanService/GetScanResults"
	FscanService_StreamScanResults_FullMethodName = "/lib.FscanService/StreamScanResults"
)

// FscanServiceClient is the client API for FscanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FscanServiceClient interface {
	// 启动扫描任务
	StartScan(ctx context.Context, in *StartScanRequest, opts ...grpc.CallOption) (*StartScanResponse, error)
	// 获取扫描结果（非流式）
	GetScanResults(ctx context.Context, in *TaskResultsRequest, opts ...grpc.CallOption) (*TaskResultsResponse, error)
	// 获取扫描结果（流式）
	StreamScanResults(ctx context.Context, in *TaskResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScanResult], error)
}

type fscanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFscanServiceClient(cc grpc.ClientConnInterface) FscanServiceClient {
	return &fscanServiceClient{cc}
}

func (c *fscanServiceClient) StartScan(ctx context.Context, in *StartScanRequest, opts ...grpc.CallOption) (*StartScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartScanResponse)
	err := c.cc.Invoke(ctx, FscanService_StartScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fscanServiceClient) GetScanResults(ctx context.Context, in *TaskResultsRequest, opts ...grpc.CallOption) (*TaskResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResultsResponse)
	err := c.cc.Invoke(ctx, FscanService_GetScanResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fscanServiceClient) StreamScanResults(ctx context.Context, in *TaskResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScanResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FscanService_ServiceDesc.Streams[0], FscanService_StreamScanResults_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskResultsRequest, ScanResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FscanService_StreamScanResultsClient = grpc.ServerStreamingClient[ScanResult]

// FscanServiceServer is the server API for FscanService service.
// All implementations must embed UnimplementedFscanServiceServer
// for forward compatibility.
type FscanServiceServer interface {
	// 启动扫描任务
	StartScan(context.Context, *StartScanRequest) (*StartScanResponse, error)
	// 获取扫描结果（非流式）
	GetScanResults(context.Context, *TaskResultsRequest) (*TaskResultsResponse, error)
	// 获取扫描结果（流式）
	StreamScanResults(*TaskResultsRequest, grpc.ServerStreamingServer[ScanResult]) error
	mustEmbedUnimplementedFscanServiceServer()
}

// UnimplementedFscanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFscanServiceServer struct{}

func (UnimplementedFscanServiceServer) StartScan(context.Context, *StartScanRequest) (*StartScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScan not implemented")
}
func (UnimplementedFscanServiceServer) GetScanResults(context.Context, *TaskResultsRequest) (*TaskResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScanResults not implemented")
}
func (UnimplementedFscanServiceServer) StreamScanResults(*TaskResultsRequest, grpc.ServerStreamingServer[ScanResult]) error {
	return status.Errorf(codes.Unimplemented, "method StreamScanResults not implemented")
}
func (UnimplementedFscanServiceServer) mustEmbedUnimplementedFscanServiceServer() {}
func (UnimplementedFscanServiceServer) testEmbeddedByValue()                      {}

// UnsafeFscanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FscanServiceServer will
// result in compilation errors.
type UnsafeFscanServiceServer interface {
	mustEmbedUnimplementedFscanServiceServer()
}

func RegisterFscanServiceServer(s grpc.ServiceRegistrar, srv FscanServiceServer) {
	// If the following call pancis, it indicates UnimplementedFscanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FscanService_ServiceDesc, srv)
}

func _FscanService_StartScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FscanServiceServer).StartScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FscanService_StartScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FscanServiceServer).StartScan(ctx, req.(*StartScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FscanService_GetScanResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FscanServiceServer).GetScanResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FscanService_GetScanResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FscanServiceServer).GetScanResults(ctx, req.(*TaskResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FscanService_StreamScanResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FscanServiceServer).StreamScanResults(m, &grpc.GenericServerStream[TaskResultsRequest, ScanResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FscanService_StreamScanResultsServer = grpc.ServerStreamingServer[ScanResult]

// FscanService_ServiceDesc is the grpc.ServiceDesc for FscanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FscanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lib.FscanService",
	HandlerType: (*FscanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartScan",
			Handler:    _FscanService_StartScan_Handler,
		},
		{
			MethodName: "GetScanResults",
			Handler:    _FscanService_GetScanResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamScanResults",
			Handler:       _FscanService_StreamScanResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/fscan.proto",
}
