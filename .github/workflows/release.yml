name: 发布构建

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: '发布标签'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  goreleaser:
    name: 构建和发布
    runs-on: ubuntu-latest
    timeout-minutes: 60

    # 设置作业级别的环境变量
    env:
      GITHUB_OWNER: ${{ github.repository_owner }}
      GITHUB_REPO: ${{ github.event.repository.name }}
      PROJECT_NAME: ${{ github.event.repository.name }}

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 获取项目信息
        id: project
        run: |
          echo "owner=${GITHUB_REPOSITORY_OWNER}" >> $GITHUB_OUTPUT
          echo "repo=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 🐹 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 下载依赖
        run: |
          go mod download
          go mod verify

      - name: 🗜️ 安装 UPX 压缩工具
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: ℹ️ 显示构建环境信息
        run: |
          echo "Go 版本: $(go version)"
          echo "UPX 版本: $(upx --version)"
          echo "Git 标签: ${{ steps.project.outputs.version }}"
          echo "仓库: ${{ steps.project.outputs.owner }}/${{ steps.project.outputs.repo }}"

      - name: 🧪 运行测试
        run: |
          go test -v ./...

      - name: 🔍 验证 GoReleaser 配置
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: check -f .github/conf/.goreleaser.yml

      - name: 🚀 构建和发布
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean -f .github/conf/.goreleaser.yml
          workdir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 上传构建产物
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: 构建产物-${{ steps.project.outputs.version }}
          path: |
            dist/
            !dist/*.txt
          retention-days: 30

      - name: 📊 生成构建报告
        if: always()
        run: |
          echo "## 🎉 构建完成报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ steps.project.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **仓库**: ${{ steps.project.outputs.owner }}/${{ steps.project.outputs.repo }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go 版本**: $(go version | cut -d' ' -f3)" >> $GITHUB_STEP_SUMMARY
          echo "- **构建时间**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "dist" ]; then
            echo "### 📦 生成的文件:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ls -la dist/ >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi